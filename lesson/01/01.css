.container {
  /* 最大幅を固定 */
  max-width: 1000px;
  /*
  幅を指定したボックスの左右の margin を両方とも auto にすると、
  親要素と自分自身の幅の差分となる余白を2等分してボックスの左右それぞれに均等に配置し、
  その結果ボックスが中央に配置されるという仕組み。
  */
  margin-left: auto;
  margin-right: auto;
  background: #eee;
}

/* 画像のフルード（液体のように容器の大きさに合わせて変化する）化 */
img {

  /* 画像自体の物理的な幅を最大値としてそれ以上は広がらず、
  自分より親要素の幅が狭くなった場合には親要素幅に合わせて縮小できる
   */
  max-width: 100%;

  /* width: 100%; とした場合、画像自体の物理的な幅を超えて親要素の幅いっぱいまで広がる */
  /* width: 100%; */

  /* 画像のアスペクト比を維持するための設定 */
  height: auto;
}

.row {
  display: flex;

  /* フレックスコンテナの主軸の幅に対して余白をもって等間隔に配置されます。
  余白がないときは、flex-startと同じになります。 */
  justify-content: space-between;

  /* padding 左右 20ox ずつを含んだサイズ */
  max-width: 640px;
  /* ブロックレベル要素を中央揃えにする */
  margin: 0 auto;
  padding: 20px;
  outline: 1px dashed #999;
}

.col2 {
  /* 
  %は親要素の content-box サイズを基準（100%）とし、自分自身のサイズの割合を算出する。
  子要素の%幅の合計が100%を超えるとカラム落ちする場合があるので注意すること。
   */
  /* width: 50%; */

  /* 
  実務において、デザインカンプをもとに静的にデザインされたものをもとに、同一比率で可変レイアウトに変換する.
  (子要素のサイズ) ÷ （親要素の content-box サイズ） × 100%
  calc((300 / 640) * 100%) = 46.875%
  */
  /* width: calc((290 / 600) * 100%); */

  /*
  親要素に padding がある場合、子要素の%計算の基準となる領域は
  paddng を除いた純粋なコンテンツ領域（=content-box）のサイズを使用する。
  calc((290 / 600) * 100%) = 48.333%
  */
  width: calc((290 / 600) * 100%);

  border: 1px dashed #999;
  background: #e7e7e7;
}